/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Janela.java
 *
 * Created on 21/05/2011, 19:37:10
 */

package gui;


import arquivos.ArquivoCoeficientes;
import arquivos.ArquivoTabela;
import arquivos.Config;
import arquivos.Lang;
import java.awt.Toolkit;
import serial.*;
import java.awt.event.*;
import java.net.URL;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

/**
 *
 * @author Richard
 */
public class Janela extends javax.swing.JFrame {

    /** Creates new form Janela */
    public Janela()
    {
        try
        {
            //Usa o look and feel do sistema, interface gráfica
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {}

        Config c = new Config();//Carrega as configurações de idioma e de calibração
        if(c.getIdioma() != null)
        {
            Lang.load(c.getIdioma());
        }
        if(c.getSalvCalibracao()== true)
        {
            coeficientes = new ArquivoCoeficientes().getCoeficientes(c.getCalibracao());
        }
        serial = new SerialComm();//carrega os dados da porta serial
        
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        distanciaFinal = new javax.swing.JTextField();
        intervalo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        iniciaTabela();
        tabela = new javax.swing.JTable();
        geraTabela = new javax.swing.JButton();
        capturar = new javax.swing.JButton();
        grafico = new Grafico();
        painel = grafico.getChartPanel();
        URL url = this.getClass().getResource("/gui/projIcon.png");
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(url));
        jToolBar1 = new javax.swing.JToolBar();
        bCalibrar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        importButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        exit = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jToolBar2 = new javax.swing.JToolBar();
        statusArduino = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        importaDados = new javax.swing.JMenuItem();
        menuExportButton = new javax.swing.JMenuItem();
        mSair = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        atualizaSerial = new javax.swing.JMenuItem();
        portasSeriais = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Medidor de Intensidade");
        setLocationByPlatform(true);

        jSplitPane1.setOneTouchExpandable(true);

        jLabel5.setText(Lang.message("max_distance"));

        intervalo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intervaloActionPerformed(evt);
            }
        });

        jLabel8.setText(Lang.message("measure_number"));

        tabela.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabela.setModel(modeloTabela);
        jScrollPane1.setViewportView(tabela);

        geraTabela.setText(Lang.message("create_table"));
        geraTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geraTabelaActionPerformed(evt);
            }
        });

        capturar.setText(Lang.message("read_value"));
        capturar.setEnabled(false);
        capturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capturarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(distanciaFinal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(intervalo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(geraTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(81, Short.MAX_VALUE)
                .addComponent(capturar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distanciaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(intervalo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(geraTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(capturar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        javax.swing.GroupLayout painelLayout = new javax.swing.GroupLayout(painel);
        painel.setLayout(painelLayout);
        painelLayout.setHorizontalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 735, Short.MAX_VALUE)
        );
        painelLayout.setVerticalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 451, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(painel);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        bCalibrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/calibra.png"))); // NOI18N
        bCalibrar.setToolTipText(Lang.message("import_calibration"));
        bCalibrar.setFocusable(false);
        bCalibrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bCalibrar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bCalibrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCalibrarActionPerformed(evt);
            }
        });
        jToolBar1.add(bCalibrar);
        jToolBar1.add(jSeparator2);

        importButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Import-48.png"))); // NOI18N
        importButton.setToolTipText(Lang.message("import_table"));
        importButton.setFocusable(false);
        importButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        importButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(importButton);

        exportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Export-48.png"))); // NOI18N
        exportButton.setToolTipText(Lang.message("export_table"));
        exportButton.setEnabled(false);
        exportButton.setFocusable(false);
        exportButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(exportButton);
        jToolBar1.add(jSeparator3);

        exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/exit48.png"))); // NOI18N
        exit.setToolTipText(Lang.message("exit"));
        exit.setFocusable(false);
        exit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jToolBar1.add(exit);
        jToolBar1.add(jSeparator1);

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        statusArduino.setText(Lang.message("arduino_not_connected"));
        jToolBar2.add(statusArduino);

        jMenu1.setText(Lang.message("file"));
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        importaDados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/calibra16.png"))); // NOI18N
        importaDados.setText(Lang.message("import_calibration"));
        importaDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importaDadosActionPerformed(evt);
            }
        });
        jMenu1.add(importaDados);

        menuExportButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuExportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Export-16.png"))); // NOI18N
        menuExportButton.setText(Lang.message("export_table"));
        menuExportButton.setEnabled(false);
        menuExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExportButtonActionPerformed(evt);
            }
        });
        jMenu1.add(menuExportButton);

        mSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        mSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/exit16.png"))); // NOI18N
        mSair.setText(Lang.message("exit"));
        mSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSairActionPerformed(evt);
            }
        });
        jMenu1.add(mSair);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(Lang.message("option"));

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/tools.png"))); // NOI18N
        jMenuItem3.setText(Lang.message("option"));
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        atualizaSerial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Refresh.png"))); // NOI18N
        atualizaSerial.setText(Lang.message("update_list"));
        atualizaSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizaSerialActionPerformed(evt);
            }
        });
        jMenu2.add(atualizaSerial);

        JRadioButton portas[] = portasDisponiveis();
        for(int count = 0; count< portas.length; count ++)
        portasSeriais.add(portas[count]);

        portasSeriais.setText(Lang.message("serial_ports"));

        jMenu2.add(portasSeriais);

        jMenuBar1.add(jMenu2);

        jMenu3.setText(Lang.message("help"));

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/sobre.png"))); // NOI18N
        jMenuItem1.setText(Lang.message("about"));
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 906, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 906, Short.MAX_VALUE)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 906, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void geraTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geraTabelaActionPerformed
        if(coeficientes == null)//verifica se há algum dado fornecido errado pelo usuário
        {
            JOptionPane.showMessageDialog(null,Lang.message("error_import"), Lang.message("error"), JOptionPane.WARNING_MESSAGE);
        }
        else if(!distanciaFinal.getText().matches("[0-9]+"))
        {
            JOptionPane.showMessageDialog(null,Lang.message("err_distance"), Lang.message("error"), JOptionPane.WARNING_MESSAGE);
        }
        else if(!intervalo.getText().matches("[0-9]+"))
        {
            JOptionPane.showMessageDialog(null,Lang.message("err_interval") , Lang.message("error"), JOptionPane.WARNING_MESSAGE);
        }
        else if (Integer.parseInt(intervalo.getText()) < 2)
        {
            JOptionPane.showMessageDialog(null, Lang.message("err_more_equals"), Lang.message("error"), JOptionPane.WARNING_MESSAGE);
        }
        else if(Integer.parseInt(distanciaFinal.getText()) < 0)
        {
            JOptionPane.showMessageDialog(null, Lang.message("err_signal"), Lang.message("error"), JOptionPane.WARNING_MESSAGE);
        }
        else//caso todos os dado estejam preenchidos corretamente, é gerada a tabela
        {
            double dist = Integer.parseInt(distanciaFinal.getText());
            int linhas = Integer.parseInt(intervalo.getText());
            double valor = (double)dist/((double)linhas-1);
            ArrayList dados = new ArrayList();
            if(resistencia != null)
                resistencia = null;//Ao gerar a tabela, caso haja algum dado anterior, é deletado para evitar conflitos no programa
            resistencia = new double[linhas];
            for(int count = 0; count < linhas; count++)//Adiciona os valores das distancias ao arrayList
            {
                dados.add(valor*count);
            }
            if(modeloTabela.getRowCount()> linhas)//Ajusta a tabela de acordo com a quantidade de medidas a ser realizadas
            {
               for(int count = modeloTabela.getRowCount()-1; count > linhas-1; count--)
               {
                   modeloTabela.removeRow(count);
               }
            }
            else if(modeloTabela.getRowCount() < linhas)
            {
               int numLinhas = (linhas - modeloTabela.getRowCount());
               for(int count = 0; count < numLinhas; count++)
               {
                   modeloTabela.addRow(new String[]{String.format("%.2f", dados.get(count)), ""});
               }
            }
            for(int count = 0; count < linhas; count++)//Preenche as distancias na tabela
            {

                modeloTabela.setValueAt(String.format("%.2f", dados.get(count)), count, 0);
                modeloTabela.setValueAt(0, count, 1);
            }
            if(serial.isConected() == true)//caso o arduino esteja conectado, o programa libera o usuário para coletar os dados
            {
                capturar.setEnabled(true);
                exportButton.setEnabled(true);
                menuExportButton.setEnabled(true);
            }
            else
                JOptionPane.showMessageDialog(null, Lang.message("err_port_selection"),Lang.message("error"),JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_geraTabelaActionPerformed

    private void intervaloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intervaloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_intervaloActionPerformed

    private void capturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capturarActionPerformed
        if(tabela.getSelectedRow() == -1)
            tabela.setRowSelectionInterval(0, 0);
        verificaArduino();
        if(serial.isConected() == true)
        {
            double valor = 0;
            for(int count = 0; count <5; count++)
                valor += serial.readValue();
            valor /= 5;
            valor = Math.pow(10, (Math.log10(valor)-coeficientes[1])/coeficientes[0]);
            try
            {
                modeloTabela.setValueAt(String.format("%.3f", valor), tabela.getSelectedRow(), 1);
                resistencia[tabela.getSelectedRow()] = valor;
                grafico.setIntensidade(resistencia, Integer.parseInt(distanciaFinal.getText()));
                grafico.atualiza();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, Lang.message("err_read"),Lang.message("error"),JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        else
        {
            capturar.setEnabled(false);
        }
        if(tabela.getSelectedRow()<tabela.getRowCount()-1)//Conforme o usuário faz as medidas, o programa vai avançando pela tabela, até
                                                          //chegar no ultimo campo.
            tabela.setRowSelectionInterval(tabela.getSelectedRow() + 1, tabela.getSelectedRow() + 1);
    }//GEN-LAST:event_capturarActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        new Sobre().setVisible(true);//Exibe a tela de sobre...
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void mSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSairActionPerformed
        serial.close();
        System.exit(0);
    }//GEN-LAST:event_mSairActionPerformed

    private void menuExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExportButtonActionPerformed
        if(coeficientes == null || tabela.getRowCount()<1)
            return;
        ArquivoTabela t = new ArquivoTabela();
        double dados[] = new double[tabela.getRowCount()];
        for(int count = 0; count<dados.length; count++)
        {
            String valor = modeloTabela.getValueAt(count, 1).toString();
            valor = valor.replace(',', '.');
            dados[count] = Double.parseDouble(valor);
        }
        t.setDados(dados, Integer.parseInt(distanciaFinal.getText()));
        t.salva();
    }//GEN-LAST:event_menuExportButtonActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void atualizaSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizaSerialActionPerformed
        serial.close();
        serial = null;
        serial = new SerialComm();
        portasDisponiveis();// TODO add your handling code here:
        JRadioButton portas[] = portasDisponiveis();
        portasSeriais.removeAll();
        //portasSeriais.add(atualizaSerial);
        for(int count = 0; count< portas.length; count ++)
            portasSeriais.add(portas[count]);
}//GEN-LAST:event_atualizaSerialActionPerformed

    private void importaDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importaDadosActionPerformed
        ArquivoCoeficientes arquivo = new ArquivoCoeficientes();
        this.coeficientes = arquivo.getCoeficientes();
    }//GEN-LAST:event_importaDadosActionPerformed

    private void bCalibrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCalibrarActionPerformed
        ArquivoCoeficientes arquivo = new ArquivoCoeficientes();
        this.coeficientes = arquivo.getCoeficientes();
    }//GEN-LAST:event_bCalibrarActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        if(JOptionPane.showConfirmDialog(null, Lang.message("quit"), "",JOptionPane.YES_NO_OPTION) == 0)
        {
            serial.close();
            System.exit(0);
        }
    }//GEN-LAST:event_exitActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        ArquivoTabela arq = new ArquivoTabela();
        double dados[] = arq.importaTabela();
        if(dados != null)
        {
            double valor = (double)arq.getValorMax()/((double)dados.length-1);
            distanciaFinal.setText("" + arq.getValorMax());
            intervalo.setText("" + dados.length);
            if(modeloTabela.getRowCount()> dados.length)
            {
               for(int count = modeloTabela.getRowCount()-1; count > dados.length-1; count--)
               {
                   modeloTabela.removeRow(count);
               }
            }
            else if(modeloTabela.getRowCount() < dados.length)
            {
               int numLinhas = (dados.length - modeloTabela.getRowCount());
               for(int count = 0; count < numLinhas; count++)
               {
                   modeloTabela.addRow(new String[]{"", ""});
               }
            }
            for(int count = 0; count <dados.length; count++)
            {
                modeloTabela.setValueAt(String.format("%.2f", valor*count),count,0);
                modeloTabela.setValueAt(dados[count], count, 1);
            }
            grafico.setIntensidade(dados, Integer.parseInt(distanciaFinal.getText()));
            grafico.atualiza();
        }
    }//GEN-LAST:event_importButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        if(coeficientes == null || tabela.getRowCount()<1)
            return;
        ArquivoTabela t = new ArquivoTabela();
        double dados[] = new double[tabela.getRowCount()];
        for(int count = 0; count<dados.length; count++)
        {
            String valor = modeloTabela.getValueAt(count, 1).toString();
            valor = valor.replace(',', '.');
            dados[count] = Double.parseDouble(valor);
        }
        t.setDados(dados, Integer.parseInt(distanciaFinal.getText()));
        t.salva();
    }//GEN-LAST:event_exportButtonActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        Configuracao config = new Configuracao();
        config.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    private void iniciaTabela()//Cria a tabela, com as colunas de distancia e intensidade
    {
        modeloTabela = new DefaultTableModel(null, new Object[]{Lang.message("distance_mm"),Lang.message("intensity")});
    }
    public void verificaArduino()
    {
        if (serial.isConected() == true)//O arduino só é considerado conectado após o usuário escolher a porta COM em que o mesmo está conectado
            statusArduino.setText(Lang.message("arduino_connected"));
        else
            statusArduino.setText(Lang.message("arduino_not_connected"));
    }
    private JRadioButton[] portasDisponiveis()//Lista as portas COM em que há algum hardware conectado.
    {
        ButtonGroup group = new ButtonGroup();//Cria um objeto para criar os RadioButtons
        int numPorts = serial.list().size();//verifica o total de portas para listar
        JRadioButton ports[] = new JRadioButton[numPorts];//Cria um vetor de Radio Buttons
        for(int i = 0; i < numPorts; i++)//laço para preencer o vetor com o nome das portas seriais
        {
            ports[i] = new JRadioButton(serial.list().get(i));
            ports[i].addItemListener(new ItemListener() {

                public void itemStateChanged(ItemEvent e)//quando alguma porta é selecionada, é disparado o evento
                {
                    JRadioButton source = (JRadioButton)e.getSource();
                    String name = source.getText();
                    serial.close();
                    serial.initialize(name);
                    verificaArduino();
                }
            });
            group.add(ports[i]);
        }
        return ports;
    }
     public static void main(String args[])
     {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Janela().setVisible(true);
            }
        });
    }
    private SerialComm serial;
    private double resistencia[]= null;
    private double coeficientes[] = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem atualizaSerial;
    private javax.swing.JButton bCalibrar;
    private javax.swing.JButton capturar;
    private javax.swing.JTextField distanciaFinal;
    private javax.swing.JButton exit;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton geraTabela;
    private boolean isCapture;
    private javax.swing.JButton importButton;
    private javax.swing.JMenuItem importaDados;
    private javax.swing.JTextField intervalo;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JMenuItem mSair;
    private javax.swing.JMenuItem menuExportButton;
    private javax.swing.JPanel painel;
    private Grafico grafico;
    private javax.swing.JMenu portasSeriais;
    private javax.swing.JLabel statusArduino;
    private javax.swing.JTable tabela;
    private DefaultTableModel modeloTabela;
    // End of variables declaration//GEN-END:variables

}
